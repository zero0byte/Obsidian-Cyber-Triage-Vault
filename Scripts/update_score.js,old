new Notice("ðŸ“£ Templater script triggered!");

module.exports = async (tp) => {
	await tp.frontmatter.update("threatScore", 42);
  const impact = (tp.frontmatter.impact_level || "").toLowerCase();
  const threat = (tp.frontmatter.threat_type || "").toLowerCase();
  const confidence = (tp.frontmatter.confidence || "").toLowerCase();
  let departments = tp.frontmatter.department;

  if (!Array.isArray(departments)) {
    if (typeof departments === "string" && departments.length > 0) {
      departments = [departments];
    } else {
      departments = [];
    }
  }

  departments = departments.map(d => d.toLowerCase().trim());

  const impactScoreMap = { "critical": 5, "high": 4, "moderate": 3, "low": 2, "unknown": 0 };
  const threatScoreMap = {
    "ransomware": 5, "data_exfiltration": 5,
    "unauthorized_access": 3, "malware": 3,
    "phishing": 2, "insider_threat": 2, "unknown": 0
  };
  const confidenceScoreMap = { "high": 3, "medium": 2, "low": 1, "unknown": 0 };
  const sensitiveDepts = ["finance", "legal", "it"];

  const impactScore = impactScoreMap[impact] ?? 0;
  const threatScore = threatScoreMap[threat] ?? 0;
  const confidenceScore = confidenceScoreMap[confidence] ?? 0;
  const deptScore = departments.reduce((acc, d) => acc + (sensitiveDepts.includes(d) ? 2 : 1), 0);
  const total = impactScore + deptScore + threatScore + confidenceScore;

  await tp.frontmatter.update("score", total);
  new Notice(`âœ… Score updated to ${total}`);
}
